# read in spot positions
spotPos = read.csv(paste0(dir, "spatial/tissue_positions_list.csv"), header=TRUE, row.names=1)
# head(spotPos)
# grab x and y of spots
pos = spotPos[spotPos$X0==1,4:5]
# rename to x and y
colnames(pos) = c('x', 'y')
# grab only spots that are in the tissue
rownames(pos) = rownames(spotPos)[spotPos$X0==1]
print(head(pos))
# plot
# plot(pos)
# get genecounts of only spots in tissue
geneCounts = geneCounts[, rownames(pos)]
# read in scalefactor
scalefactors_rjson = rjson::fromJSON(file=paste0(dir, 'spatial/scalefactors_json.json'))
# get hirest
scalefactor = scalefactors_rjson$tissue_hires_scalef
# align positions
posAligned = data.frame(x = pos[,2], y = -pos[,1] + dim(img)[1]/scalefactor)*scalefactor
rownames(posAligned) = rownames(pos)
## spot size
r = 55*scalefactor ## microns to pixels = NEED FOR PLOTTING
return_object = list("img" = img, "geneCounts" = geneCounts, "pos" = pos, "posAligned" = posAligned, "r" = r, "scalefactor" = scalefactor)
return (return_object)
}
z = read_data(dir)
z$scalefactor
# read_data func
STTileMaker = function(dir) {
# read in data
data = read_data(dir)
# clean data
data_clean = clean_data(data$geneCounts, data$posAligned)
print(data$scalefactor)
# get positions of each spot
pos.image = data$pos[rownames(data_clean$posClean),]*data$scalefactor
print("there")
## repeat for all tiles
tiles = lapply(1:nrow(data_clean$posClean), function(i) {
print(paste0("Making tile: ",i))
## for grabbing matrix elements in image
pos.image.test = pos.image[i,]
# get min and max of each tile
pos.test.min = floor(pos.image.test - data$r)
pos.test.max = ceiling(pos.image.test + data$r)
#xs = seq(as.numeric(pos.test.min[1]), as.numeric(pos.test.max[1]))
#ys = seq(as.numeric(pos.test.min[2]), as.numeric(pos.test.max[2]))
xs = seq(as.numeric(pos.test.min[1]), as.numeric(pos.test.min[1])+23) # NOTE: need to fix this ?????
ys = seq(as.numeric(pos.test.min[2]), as.numeric(pos.test.min[2])+23)
# get image spot
xspot = img[xs, ys, 1:3]
return(xspot)
})
names(tiles) = rownames(data_clean$posClean)
return(tiles)
}
tiles = STTileMaker(dir)
dim(tiles)
tiles[0]
tiles
## given a spot position, get corresponding image region
i <- 100
pos.test <- posClean[i,] ## for plotting
pos.image.test <- pos.image[i,] ## for grabbing matrix elements in image
pos.test
pos.image.test
dim(img)
pos.test.min <- floor(pos.image.test - r)
pos.test.max <- ceiling(pos.image.test + r)
xs <- seq(as.numeric(pos.test.min[1]), as.numeric(pos.test.max[1]))
ys <- seq(as.numeric(pos.test.min[2]), as.numeric(pos.test.max[2]))
xspot <- grid::rasterGrob(img[xs, ys, 1:3],
interpolate = FALSE,
width = grid::unit(1, "npc"),
height = grid::unit(1, "npc"))
plot(xspot$raster)
pltspot <- ggplot() + geom_point(data=as.data.frame(posClean), aes(x=x, y=y), col='lightgrey') +
annotation_custom(
grob = xspot,
xmin = as.numeric(pos.test[1]-r),
xmax = as.numeric(pos.test[1]+r),
ymin = as.numeric(pos.test[2]-r),
ymax = as.numeric(pos.test[2]+r)) +
coord_fixed(
xlim = c(0, ncol(img)),
ylim = c(0, nrow(img)))
pltspot
## repeat for all tiles
tiles <- lapply(1:nrow(posClean), function(i) {
print(i)
pos.image.test <- pos.image[i,] ## for grabbing matrix elements in image
pos.test.min <- floor(pos.image.test - r)
pos.test.max <- ceiling(pos.image.test + r)
#xs <- seq(as.numeric(pos.test.min[1]), as.numeric(pos.test.max[1]))
#ys <- seq(as.numeric(pos.test.min[2]), as.numeric(pos.test.max[2]))
xs <- seq(as.numeric(pos.test.min[1]), as.numeric(pos.test.min[1])+23)
ys <- seq(as.numeric(pos.test.min[2]), as.numeric(pos.test.min[2])+23)
xspot <- img[xs, ys, 1:3]
return(xspot)
})
names(tiles) <- rownames(posClean)
tiles
class(tiles)
pltspot <- ggplot() + geom_point(data=as.data.frame(posClean), aes(x=x, y=y), col='lightgrey')
pltspot
xspotplots <- lapply(names(tiles)[1:100], function(xspotname) {
pos.test <- posClean[xspotname,]
pos.test.min <- floor(pos.test - r)
pos.test.max <- ceiling(pos.test + r)
xspot <- grid::rasterGrob(tiles[[xspotname]],
interpolate = FALSE,
width = grid::unit(1, "npc"),
height = grid::unit(1, "npc"))
pltspot <<- pltspot + annotation_custom(
grob = xspot,
xmin = as.numeric(pos.test.min[1]),
xmax = as.numeric(pos.test.max[1]),
ymin = as.numeric(pos.test.min[2]),
ymax = as.numeric(pos.test.max[2]))
})
pltspot +
coord_fixed(
xlim = c(0, ncol(img)),
ylim = c(0, nrow(img)))
devtools::document()
devtools::document()
paste0(dir, 'spatial/tissue_hires_image.png')
usethis::use_mit_license()
?paste0
# read_data func
read_data = function(dir) {
print(class(dir))
# read in image
img = readPNG(paste0(dir, 'spatial/tissue_hires_image.png'))
# file name
file = paste0(dir, 'filtered_feature_bc_matrix.h5')
# read in file
h5f = H5Fopen(file)
# get gene expression (list of objects)
geneInfo = h5f$matrix
# get gene names (vector of genes)
genes = geneInfo$features$name
# get spot ids (vector of names)
spotIDs = geneInfo$barcodes
# read in matrix
library(Matrix)
# make sparse matrix of expression
geneCounts = sparseMatrix(
# set dimensions
dims = geneInfo$shape,
# set indices
i = as.numeric(geneInfo$indices),
# make numeric
p = as.numeric(geneInfo$indptr),
# add gene expression
x = as.numeric(geneInfo$data),
index1 = FALSE
)
# set rownames to gene names
rownames(geneCounts) = genes
# set col names to spot ids
colnames(geneCounts) = spotIDs
# print dim
dim(geneCounts)
# read in spot positions
spotPos = read.csv(paste0(dir, "spatial/tissue_positions_list.csv"), header=TRUE, row.names=1)
# head(spotPos)
# grab x and y of spots
pos = spotPos[spotPos$X0==1,4:5]
# rename to x and y
colnames(pos) = c('x', 'y')
# grab only spots that are in the tissue
rownames(pos) = rownames(spotPos)[spotPos$X0==1]
print(head(pos))
# plot
# plot(pos)
# get genecounts of only spots in tissue
geneCounts = geneCounts[, rownames(pos)]
# read in scalefactor
scalefactors_rjson = rjson::fromJSON(file=paste0(dir, 'spatial/scalefactors_json.json'))
# get hirest
scalefactor = scalefactors_rjson$tissue_hires_scalef
# align positions
posAligned = data.frame(x = pos[,2], y = -pos[,1] + dim(img)[1]/scalefactor)*scalefactor
rownames(posAligned) = rownames(pos)
## spot size
r = 55*scalefactor ## microns to pixels = NEED FOR PLOTTING
return_object = list("img" = img, "geneCounts" = geneCounts, "pos" = pos, "posAligned" = posAligned, "r" = r, "scalefactor" = scalefactor)
return (return_object)
}
z = read_data(dir)
# read_data func
read_data <- function(dir = "yes") {
# read in image
img = readPNG(paste0(dir, 'spatial/tissue_hires_image.png'))
# file name
file = paste0(dir, 'filtered_feature_bc_matrix.h5')
# read in file
h5f = H5Fopen(file)
# get gene expression (list of objects)
geneInfo = h5f$matrix
# get gene names (vector of genes)
genes = geneInfo$features$name
# get spot ids (vector of names)
spotIDs = geneInfo$barcodes
# read in matrix
library(Matrix)
# make sparse matrix of expression
geneCounts = sparseMatrix(
# set dimensions
dims = geneInfo$shape,
# set indices
i = as.numeric(geneInfo$indices),
# make numeric
p = as.numeric(geneInfo$indptr),
# add gene expression
x = as.numeric(geneInfo$data),
index1 = FALSE
)
# set rownames to gene names
rownames(geneCounts) = genes
# set col names to spot ids
colnames(geneCounts) = spotIDs
# print dim
dim(geneCounts)
# read in spot positions
spotPos = read.csv(paste0(dir, "spatial/tissue_positions_list.csv"), header=TRUE, row.names=1)
# head(spotPos)
# grab x and y of spots
pos = spotPos[spotPos$X0==1,4:5]
# rename to x and y
colnames(pos) = c('x', 'y')
# grab only spots that are in the tissue
rownames(pos) = rownames(spotPos)[spotPos$X0==1]
print(head(pos))
# plot
# plot(pos)
# get genecounts of only spots in tissue
geneCounts = geneCounts[, rownames(pos)]
# read in scalefactor
scalefactors_rjson = rjson::fromJSON(file=paste0(dir, 'spatial/scalefactors_json.json'))
# get hirest
scalefactor = scalefactors_rjson$tissue_hires_scalef
# align positions
posAligned = data.frame(x = pos[,2], y = -pos[,1] + dim(img)[1]/scalefactor)*scalefactor
rownames(posAligned) = rownames(pos)
## spot size
r = 55*scalefactor ## microns to pixels = NEED FOR PLOTTING
return_object = list("img" = img, "geneCounts" = geneCounts, "pos" = pos, "posAligned" = posAligned, "r" = r, "scalefactor" = scalefactor)
return (return_object)
}
# read_data func
read_data <- function(dir) {
print(dir)
# read in image
img = readPNG(paste0(dir, 'spatial/tissue_hires_image.png'))
# file name
file = paste0(dir, 'filtered_feature_bc_matrix.h5')
# read in file
h5f = H5Fopen(file)
# get gene expression (list of objects)
geneInfo = h5f$matrix
# get gene names (vector of genes)
genes = geneInfo$features$name
# get spot ids (vector of names)
spotIDs = geneInfo$barcodes
# read in matrix
library(Matrix)
# make sparse matrix of expression
geneCounts = sparseMatrix(
# set dimensions
dims = geneInfo$shape,
# set indices
i = as.numeric(geneInfo$indices),
# make numeric
p = as.numeric(geneInfo$indptr),
# add gene expression
x = as.numeric(geneInfo$data),
index1 = FALSE
)
# set rownames to gene names
rownames(geneCounts) = genes
# set col names to spot ids
colnames(geneCounts) = spotIDs
# print dim
dim(geneCounts)
# read in spot positions
spotPos = read.csv(paste0(dir, "spatial/tissue_positions_list.csv"), header=TRUE, row.names=1)
# head(spotPos)
# grab x and y of spots
pos = spotPos[spotPos$X0==1,4:5]
# rename to x and y
colnames(pos) = c('x', 'y')
# grab only spots that are in the tissue
rownames(pos) = rownames(spotPos)[spotPos$X0==1]
print(head(pos))
# plot
# plot(pos)
# get genecounts of only spots in tissue
geneCounts = geneCounts[, rownames(pos)]
# read in scalefactor
scalefactors_rjson = rjson::fromJSON(file=paste0(dir, 'spatial/scalefactors_json.json'))
# get hirest
scalefactor = scalefactors_rjson$tissue_hires_scalef
# align positions
posAligned = data.frame(x = pos[,2], y = -pos[,1] + dim(img)[1]/scalefactor)*scalefactor
rownames(posAligned) = rownames(pos)
## spot size
r = 55*scalefactor ## microns to pixels = NEED FOR PLOTTING
return_object = list("img" = img, "geneCounts" = geneCounts, "pos" = pos, "posAligned" = posAligned, "r" = r, "scalefactor" = scalefactor)
return (return_object)
}
devtools::document()
devtools::document()
dir
directory
directory = here("data/f12hr_140_processed/outs/")
paste0(directory, 'filtered_feature_bc_matrix.h5')
# file name
file = paste0(directory, 'filtered_feature_bc_matrix.h5')
# read in file
h5f = H5Fopen(file)
library(STTileMaker)
read_data()
library(STTileMaker)
clean_data()
STTileMaker()
?STTileMaker
?STTileMaker()
library(STTileMaker)
devtools::document()
library(STTileMaker)
STTileMaker(here)
library(here)
st = STTileMaker(here::here("data/f12hr_140_processed/outs/"))
library(STTileMaker)
st = STTileMaker(here::here("data/f12hr_140_processed/outs/"))
st[0]
st$`CTATGTCTATTGAAAC-1`
usethis::use_vignette()
usethis::use_vignette("STTileMaker")
here("./init_exploration_of_ST_data/data/stalign_blog_20231105/f12hr_140_processed/outs/spatial/tissue_positions_list.csv")
here::here("data/f12hr_140_processed/outs/")
library(STTileMaker)
z = STTileMaker(here::here("data/f12hr_140_processed/outs/"))
library(STTileMaker)
library(STTileMaker)
z = STTileMaker(here::here("data/f12hr_140_processed/outs/"))
plot_tile(z)
plot_tile(z, 2)
plot_tile(z, 100)
# read in functions
library(STTileMaker) # custom functions
library(ggplot2) # for plotting
library(tidyverse) # for data manipulation
library(here) # for file archiving
library(paletteer) # for colors
library(ggrepel) # for plotting
# read in functions
library(STTileMaker) # custom functions
library(ggplot2) # for plotting
library(tidyverse) # for data manipulation
library(here) # for file archiving
library(paletteer) # for colors
library(ggrepel) # for plotting
# NOTE: make data easier to get
tiles = STTileMaker(here::here("data/f12hr_140_processed/outs/"))
# check to see it works
plot_tile(tiles,1)
# check to see it works
plot_tile(tiles, 2)
plot_tile(tiles, 100)
library(STTileMaker)
library(STTileMaker)
library(STTileMaker)
# read in functions
library(STTileMaker) # custom functions
library(ggplot2) # for plotting
library(tidyverse) # for data manipulation
library(here) # for file archiving
library(paletteer) # for colors
library(ggrepel) # for plotting
# NOTE: make data easier to get
data = STTileMaker_read_data(here::here("data/f12hr_140_processed/outs/"))
tiles = STTileMaker_make_tiles(data)
# check to see it works
STTileMaker_plot_tile(tiles, 1)
STTileMaker_plot_tile(tiles, 100)
## features need to have some variation
features <- sapply(1:length(tiles), function(i) {
#1 - mean(tiles[[i]])
#mean(tiles[[i]][,,1]) ## red
mean(tiles[[i]][,,1] - tiles[[i]][,,3]) ## red minus blue
})
names(features) <- names(tiles)
names(features)
hist(features)
geneCountsClean
## normalize
normFactor <- colSums(data$geneCountsClean)
normFactor
mat <- t(t(data$geneCountsClean)/normFactor)
mat <- log10(mat * 1e6 +1)
## simple correlation
plot(mat[g,], features)
# gene
g <- 'Tgm4'
## simple correlation
plot(mat[g,], features)
data$geneCounts
# gene
g <- 'Sox17'
## simple correlation
plot(mat[g,], features)
cor(mat[g,], features)
cors <- sapply(rownames(mat), function(g) {
cor(mat[g,], features)
})
mat
cors
cors <- sapply(rownames(mat), function(g) {
cor(mat[g,], features)
})
hist(cors)
range(cors, na.rm=TRUE)
names(which(cors == min(cors, na.rm=TRUE)))
names(which(cors == max(cors, na.rm=TRUE)))
g <- "Fth1"
ggexp <- scale(mat[g,])[,1]
df <- data.frame(posClean, ggexp)
df <- data.frame(data$posClean, ggexp)
plt + geom_point(aes(x = x, y = y,
color = ggexp),
size = r/5,
data = df) + ggtitle(g) +
scale_colour_gradient2(
low = "blue",
mid = "white",
high = "red")
plt <- ggplot() +
annotation_custom(
grob = x,
xmin = 0,
xmax = ncol(x$raster),
ymin = 0,
ymax = nrow(x$raster)) +
coord_fixed(
xlim = c(0, ncol(x$raster)),
ylim = c(0, nrow(x$raster))) +
theme_void()
## now we can plot with the image
x <- grid::rasterGrob(data$img,
interpolate = FALSE,
width = grid::unit(1, "npc"),
height = grid::unit(1, "npc"))
plt <- ggplot() +
annotation_custom(
grob = x,
xmin = 0,
xmax = ncol(x$raster),
ymin = 0,
ymax = nrow(x$raster)) +
coord_fixed(
xlim = c(0, ncol(x$raster)),
ylim = c(0, nrow(x$raster))) +
theme_void()
plt
plt + geom_point(aes(x = x, y = y,
color = ggexp),
size = r/5,
data = df) + ggtitle(g) +
scale_colour_gradient2(
low = "blue",
mid = "white",
high = "red")
plt + geom_point(aes(x = x, y = y,
color = ggexp),
size = data$r/5,
data = df) + ggtitle(g) +
scale_colour_gradient2(
low = "blue",
mid = "white",
high = "red")
plot(mat[g,], features)
cor(mat[g,], features)
## note since I'm using the low res image, tiles are very small, not many features beyond intensities
dim(tiles[[1]])
# read in functions
library(STTileMaker) # custom functions
library(ggplot2) # for plotting
library(tidyverse) # for data manipulation
library(here) # for file archiving
library(paletteer) # for colors
library(ggrepel) # for plotting
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# read in data
# NOTE: make data easier to get
data = STTileMaker_read_data(here::here("data/f12hr_140_processed/outs/"))
tiles = STTileMaker_make_tiles(data)
# check to see it works
STTileMaker_plot_tile(tiles, 1)
STTileMaker_plot_tile(tiles, 100)
tiles
# check to see it works
STTileMaker_plot_tile(tiles, 1)
# check to see it works
STTileMaker_plot_tile(tiles, 1)
STTileMaker_plot_tile(tiles, 100)
